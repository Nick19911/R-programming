# Caching the Inverse of a Matrix:
# This function creates a new matrix-object to cache the inverse

makecachematrix <- function(x = matrix()) {
inv <- NULL 
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}

# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has 
#already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

cachesolve <- function(x, ...) {
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
